

#include "clothsim.h"

#include <GLUT/glut.h>

static ClothSim* s = 0;

// 32x32 image data for the cloth texture. Use a file to change!
static const char imageData[] = {0x22, 0x53, 0x99, 0x22, 0x55, 0x9A, 0x21, 0x54, 0x9A, 0x23, 0x55, 0x95, 0x21, 0x50, 0x98, 0x2B, 0x64, 0xA8, 0x35, 0x60, 0xA0, 0x2F, 0x62, 0xA4, 0x30, 0x6B, 0xAE, 0x21, 0x4E, 0x8C, 0x26, 0x57, 0x98, 0x28, 0x5A, 0x9F, 0x2D, 0x61, 0xA0, 0x29, 0x59, 0x9F, 0x24, 0x54, 0x99, 0x18, 0x4C, 0x94, 0x56, 0x7B, 0xAB, 0x83, 0x9D, 0xB6, 0x77, 0x8F, 0xB0, 0x82, 0x9A, 0xBE, 0x76, 0x91, 0xB5, 0x8D, 0xA5, 0xC6, 0x9B, 0xAC, 0xC8, 0x76, 0x94, 0xC0, 0x92, 0xA7, 0xC5, 0x84, 0x9B, 0xBA, 0x7E, 0x9C, 0xBF, 0x71, 0x93, 0xBB, 0x79, 0x99, 0xC3, 0x8A, 0xA0, 0xC0, 0x6A, 0x91, 0xBC, 0x9B, 0xAE, 0xCB, 0x30, 0x62, 0x9C, 0x22, 0x57, 0x9C, 0x2E, 0x67, 0xAC, 0x22, 0x52, 0x97, 0x2D, 0x67, 0xAA, 0x2A, 0x5A, 0x97, 0x28, 0x5F, 0xA2, 0x2D, 0x62, 0xA1, 0x36, 0x71, 0xAE, 0x1B, 0x44, 0x88, 0x21, 0x4E, 0x93, 0x29, 0x61, 0xA3, 0x2E, 0x5D, 0x9E, 0x1D, 0x56, 0x9A, 0x24, 0x58, 0x9C, 0x1D, 0x4B, 0x8E, 0x78, 0x8B, 0xB1, 0x88, 0x9E, 0xBE, 0x6A, 0x89, 0xB0, 0xA2, 0xAF, 0xC5, 0x43, 0x72, 0xA5, 0xB3, 0xBB, 0xCE, 0x4C, 0x7F, 0xB4, 0x85, 0x9F, 0xC1, 0x7D, 0x9B, 0xC3, 0x64, 0x8E, 0xBE, 0xA4, 0xB4, 0xC9, 0x56, 0x84, 0xB7, 0x98, 0xA8, 0xC6, 0x59, 0x83, 0xB5, 0x93, 0xA8, 0xC0, 0x81, 0x9E, 0xC0, 0x1F, 0x50, 0x97, 0x2D, 0x60, 0x9F, 0x22, 0x5D, 0xA3, 0x25, 0x5B, 0xA1, 0x31, 0x63, 0xA0, 0x1D, 0x4F, 0x98, 0x29, 0x61, 0xA1, 0x1D, 0x50, 0x97, 0x31, 0x6B, 0xAA, 0x2F, 0x5C, 0x95, 0x1A, 0x4A, 0x91, 0x25, 0x60, 0x9E, 0x1C, 0x50, 0x9A, 0x31, 0x65, 0xA4, 0x2C, 0x5D, 0xA1, 0x2D, 0x5F, 0xA1, 0x37, 0x69, 0xA7, 0x9C, 0xAD, 0xC9, 0x82, 0x9F, 0xBD, 0x5E, 0x89, 0xBB, 0x9C, 0xAC, 0xC3, 0x55, 0x82, 0xBB, 0xA3, 0xB2, 0xCA, 0x49, 0x7C, 0xB2, 0x7C, 0x99, 0xBE, 0x75, 0x97, 0xC1, 0x71, 0x96, 0xC0, 0xA1, 0xB2, 0xC9, 0x4F, 0x80, 0xBA, 0xAF, 0xB6, 0xCB, 0x4E, 0x80, 0xB4, 0x95, 0xAB, 0xC8, 0x27, 0x53, 0x96, 0x22, 0x4E, 0x97, 0x2C, 0x63, 0xA3, 0x29, 0x5A, 0x9B, 0x2F, 0x65, 0xA7, 0x24, 0x57, 0x9A, 0x21, 0x53, 0x9A, 0x2C, 0x5F, 0xA2, 0x2C, 0x58, 0x9B, 0x20, 0x4D, 0x90, 0x27, 0x5B, 0x9D, 0x28, 0x60, 0xA4, 0x2B, 0x61, 0xA6, 0x1C, 0x4F, 0x94, 0x2B, 0x63, 0xA5, 0x1F, 0x50, 0x95, 0x57, 0x84, 0xBA, 0x7E, 0xA0, 0xC1, 0x7A, 0x98, 0xBB, 0x88, 0xA1, 0xC0, 0x7B, 0x96, 0xBC, 0x86, 0xA2, 0xC5, 0x8B, 0xA4, 0xC5, 0x77, 0x98, 0xBC, 0x84, 0x9D, 0xC0, 0x72, 0x91, 0xB6, 0x98, 0xAC, 0xC9, 0x78, 0x95, 0xB9, 0x82, 0x99, 0xBA, 0x72, 0x91, 0xB9, 0x69, 0x8C, 0xB4, 0x8E, 0xA7, 0xC6, 0x21, 0x4B, 0x91, 0x2A, 0x5F, 0xA2, 0x25, 0x56, 0x99, 0x28, 0x5B, 0x9C, 0x2B, 0x63, 0xA7, 0x24, 0x59, 0x9E, 0x24, 0x4D, 0x90, 0x28, 0x5A, 0x9C, 0x2D, 0x66, 0xA7, 0x1D, 0x49, 0x89, 0x29, 0x53, 0x99, 0x30, 0x68, 0xA9, 0x2D, 0x67, 0xAC, 0x28, 0x5B, 0x99, 0x27, 0x59, 0x9A, 0x20, 0x54, 0x96, 0x79, 0x94, 0xB7, 0x97, 0xAD, 0xC7, 0x79, 0x97, 0xBC, 0x91, 0xA6, 0xC1, 0x5F, 0x87, 0xB7, 0x91, 0xA7, 0xC1, 0x69, 0x93, 0xC3, 0xA4, 0xB3, 0xCA, 0x78, 0x95, 0xBB, 0x76, 0x97, 0xBF, 0x91, 0xA8, 0xC7, 0x6F, 0x94, 0xBF, 0xA3, 0xAD, 0xC2, 0x54, 0x83, 0xB3, 0x7E, 0x98, 0xBE, 0x8B, 0xA3, 0xC3, 0x21, 0x4E, 0x94, 0x2B, 0x5E, 0xA0, 0x22, 0x57, 0x9D, 0x29, 0x5F, 0xA4, 0x24, 0x59, 0x9A, 0x1B, 0x51, 0x96, 0x28, 0x5A, 0x99, 0x24, 0x54, 0x94, 0x2D, 0x6B, 0xAB, 0x23, 0x53, 0x92, 0x1E, 0x4F, 0x94, 0x30, 0x6D, 0xAA, 0x25, 0x5D, 0xA3, 0x33, 0x63, 0xA0, 0x21, 0x53, 0x94, 0x2B, 0x5E, 0x9D, 0x41, 0x72, 0xA8, 0x9A, 0xAD, 0xC6, 0x7C, 0x9B, 0xBF, 0x7E, 0x9F, 0xC5, 0x88, 0xA0, 0xBB, 0x58, 0x85, 0xB8, 0xA6, 0xB7, 0xC9, 0x60, 0x89, 0xB7, 0x9B, 0xAD, 0xC7, 0x7E, 0x94, 0xBB, 0x6F, 0x92, 0xBB, 0x9E, 0xB0, 0xC8, 0x73, 0x96, 0xC4, 0xB5, 0xBC, 0xCB, 0x51, 0x7D, 0xB1, 0x91, 0xA6, 0xC3, 0x31, 0x5D, 0x9B, 0x23, 0x5A, 0xA2, 0x2D, 0x62, 0xA7, 0x2B, 0x5B, 0x9D, 0x25, 0x5D, 0xA1, 0x31, 0x64, 0x9F, 0x21, 0x59, 0x9D, 0x2D, 0x5F, 0x9E, 0x2A, 0x60, 0xA2, 0x1F, 0x4E, 0x94, 0x25, 0x59, 0x95, 0x1F, 0x5F, 0x9E, 0x2D, 0x64, 0x9F, 0x19, 0x49, 0x89, 0x26, 0x5C, 0x9D, 0x28, 0x60, 0xA3, 0x85, 0x9F, 0xBF, 0x79, 0x9A, 0xBD, 0x7C, 0x9D, 0xC2, 0xA1, 0xB2, 0xCD, 0x49, 0x7C, 0xB2, 0xAC, 0xB7, 0xC8, 0x64, 0x86, 0xB4, 0x9C, 0xAD, 0xC8, 0x7F, 0x9F, 0xC2, 0x74, 0x8F, 0xB4, 0xA2, 0xB1, 0xCB, 0x63, 0x89, 0xB9, 0x9F, 0xAE, 0xC7, 0x68, 0x8D, 0xBA, 0x80, 0x97, 0xBA, 0x86, 0x9F, 0xBE, 0x25, 0x59, 0x9F, 0x34, 0x65, 0xA2, 0x25, 0x58, 0x96, 0x26, 0x5F, 0xA1, 0x2A, 0x60, 0xA4, 0x22, 0x51, 0x98, 0x29, 0x61, 0xA0, 0x25, 0x57, 0x9B, 0x35, 0x68, 0xA3, 0x25, 0x51, 0x8C, 0x26, 0x5A, 0x9C, 0x2E, 0x62, 0xA0, 0x1E, 0x56, 0x9B, 0x2E, 0x58, 0x96, 0x2A, 0x5D, 0xA6, 0x2B, 0x62, 0xAA, 0x4E, 0x7D, 0xB2, 0x8E, 0xA9, 0xC6, 0x8B, 0xA2, 0xBE, 0x90, 0xAB, 0xCD, 0x7B, 0x98, 0xB8, 0x77, 0x98, 0xBD, 0x98, 0xA6, 0xC0, 0x7D, 0x97, 0xBF, 0xA1, 0xB2, 0xCA, 0x81, 0x94, 0xB6, 0x9D, 0xAE, 0xCD, 0x95, 0xA8, 0xC2, 0x75, 0x95, 0xBC, 0x8A, 0xA6, 0xC7, 0x7E, 0x96, 0xBB, 0x8F, 0xA8, 0xC7, 0x26, 0x5D, 0x9E, 0x2D, 0x61, 0x9F, 0x2E, 0x69, 0xA9, 0x21, 0x56, 0x9C, 0x2A, 0x58, 0x98, 0x25, 0x5D, 0xA5, 0x29, 0x57, 0x94, 0x22, 0x55, 0x93, 0x1D, 0x48, 0x90, 0x2B, 0x58, 0x99, 0x24, 0x5E, 0xA0, 0x24, 0x5B, 0x9B, 0x27, 0x60, 0xA2, 0x28, 0x55, 0x97, 0x29, 0x59, 0x9F, 0x2D, 0x62, 0xA6, 0x58, 0x85, 0xB3, 0x88, 0xA6, 0xC6, 0x92, 0xA8, 0xC5, 0x9A, 0xB0, 0xCC, 0x82, 0x9B, 0xBC, 0x6F, 0x91, 0xBB, 0x99, 0xAC, 0xC3, 0x73, 0x93, 0xBE, 0x9B, 0xAC, 0xCA, 0x74, 0x8E, 0xB4, 0xAB, 0xBC, 0xD6, 0x98, 0xA7, 0xBE, 0x73, 0x92, 0xBB, 0x99, 0xA6, 0xBD, 0x71, 0x93, 0xBB, 0xA4, 0xB8, 0xD1, 0x37, 0x63, 0x9F, 0x1D, 0x51, 0x98, 0x23, 0x5A, 0x9F, 0x29, 0x5A, 0x9B, 0x1D, 0x51, 0x98, 0x35, 0x68, 0xA6, 0x1D, 0x4A, 0x90, 0x2B, 0x59, 0x99, 0x29, 0x5B, 0x9E, 0x18, 0x4B, 0x91, 0x2D, 0x63, 0xA4, 0x1E, 0x58, 0x9C, 0x2C, 0x5E, 0x9E, 0x2E, 0x60, 0xA4, 0x30, 0x66, 0xAA, 0x23, 0x5D, 0xA4, 0x82, 0x9C, 0xBB, 0x76, 0x9A, 0xC1, 0x79, 0x9A, 0xBF, 0xA3, 0xB4, 0xCD, 0x51, 0x83, 0xB7, 0xB1, 0xBA, 0xCA, 0x59, 0x84, 0xB4, 0xA3, 0xB3, 0xCA, 0x76, 0x98, 0xC3, 0x5C, 0x86, 0xB5, 0xA5, 0xB5, 0xCC, 0x4B, 0x7D, 0xB5, 0xA8, 0xB4, 0xC4, 0x5C, 0x86, 0xB7, 0x92, 0xA8, 0xC2, 0x87, 0xA1, 0xC5, 0x27, 0x56, 0x9B, 0x32, 0x5F, 0x9E, 0x1C, 0x4C, 0x93, 0x2C, 0x5C, 0xA1, 0x33, 0x64, 0xA6, 0x21, 0x5D, 0xA5, 0x31, 0x61, 0xA0, 0x23, 0x55, 0x99, 0x34, 0x6A, 0xAC, 0x30, 0x59, 0x94, 0x20, 0x55, 0x9F, 0x36, 0x6D, 0xAE, 0x1D, 0x59, 0xA1, 0x2A, 0x5F, 0xA0, 0x2D, 0x6A, 0xAC, 0x2A, 0x66, 0xA9, 0x46, 0x72, 0xAB, 0xB0, 0xC0, 0xD7, 0x86, 0xA0, 0xBF, 0x75, 0x9C, 0xC5, 0x97, 0xAA, 0xC3, 0x69, 0x92, 0xBE, 0xA7, 0xB5, 0xC8, 0x65, 0x90, 0xBC, 0xA1, 0xB4, 0xC9, 0x6D, 0x94, 0xBB, 0x68, 0x8D, 0xBA, 0x86, 0x9E, 0xBA, 0x59, 0x83, 0xB3, 0xA9, 0xB5, 0xC7, 0x64, 0x8B, 0xBB, 0x9F, 0xB1, 0xCC, 0x25, 0x54, 0x98, 0x22, 0x58, 0x9E, 0x23, 0x57, 0x9C, 0x23, 0x4D, 0x95, 0x2B, 0x57, 0x9B, 0x27, 0x5D, 0x9C, 0x18, 0x4A, 0x90, 0x29, 0x5E, 0x9F, 0x27, 0x5B, 0x9D, 0x1A, 0x4B, 0x8D, 0x24, 0x5A, 0x9E, 0x23, 0x59, 0x9F, 0x28, 0x5E, 0xA1, 0x29, 0x63, 0xA7, 0x27, 0x5D, 0xA1, 0x2A, 0x63, 0xA7, 0x6B, 0x92, 0xBC, 0x8F, 0xA6, 0xC6, 0x84, 0x9F, 0xC2, 0x84, 0xA0, 0xC1, 0x71, 0x94, 0xBD, 0x87, 0xA2, 0xC1, 0x8B, 0xA3, 0xC1, 0x7B, 0x9A, 0xC4, 0x90, 0xA6, 0xC4, 0x69, 0x8B, 0xB5, 0x92, 0xAD, 0xCD, 0x71, 0x91, 0xB5, 0x6E, 0x92, 0xBC, 0x7B, 0x96, 0xB6, 0x67, 0x8A, 0xB6, 0x99, 0xAF, 0xCD, 0x30, 0x5B, 0x9B, 0x23, 0x54, 0x99, 0x2A, 0x62, 0xA2, 0x28, 0x55, 0x98, 0x21, 0x52, 0x94, 0x32, 0x69, 0xA6, 0x26, 0x58, 0x98, 0x23, 0x55, 0x94, 0x2D, 0x61, 0x9F, 0x23, 0x54, 0x99, 0x34, 0x6B, 0xAD, 0x3A, 0x76, 0xB7, 0x2B, 0x61, 0xA5, 0x30, 0x6B, 0xB0, 0x2B, 0x66, 0xAA, 0x28, 0x62, 0xA7, 0x8A, 0xA1, 0xC0, 0x80, 0xA0, 0xC1, 0x81, 0x9E, 0xC1, 0x99, 0xAC, 0xC6, 0x50, 0x7F, 0xB4, 0xA1, 0xAF, 0xC4, 0x64, 0x8B, 0xBB, 0x9A, 0xAB, 0xC4, 0x79, 0x97, 0xBD, 0x63, 0x81, 0xAD, 0xA9, 0xB4, 0xC8, 0x50, 0x7A, 0xAC, 0x8D, 0xA1, 0xB8, 0x4F, 0x7E, 0xB4, 0x88, 0x97, 0xB2, 0x8B, 0xA3, 0xC6, 0x1E, 0x4F, 0x9B, 0x2E, 0x64, 0xA7, 0x1F, 0x4F, 0x96, 0x2A, 0x5F, 0xA3, 0x1D, 0x4E, 0x8D, 0x1E, 0x53, 0x97, 0x2D, 0x56, 0x94, 0x1E, 0x51, 0x94, 0x2F, 0x67, 0xA9, 0x2F, 0x62, 0x9E, 0x28, 0x66, 0xAB, 0x3A, 0x6F, 0xAC, 0x2D, 0x67, 0xB0, 0x32, 0x67, 0xAA, 0x31, 0x6A, 0xAE, 0x30, 0x6C, 0xB0, 0x3C, 0x73, 0xAF, 0xAB, 0xBC, 0xD1, 0x96, 0xAA, 0xC5, 0x82, 0xA4, 0xC9, 0x96, 0xA6, 0xB9, 0x4C, 0x7E, 0xB5, 0xB1, 0xBB, 0xCD, 0x5C, 0x85, 0xB6, 0x94, 0xA9, 0xC2, 0x85, 0x9D, 0xBE, 0x6E, 0x90, 0xBD, 0x9F, 0xAB, 0xBB, 0x45, 0x74, 0xA8, 0xB5, 0xBD, 0xCB, 0x74, 0x91, 0xB9, 0xA1, 0xB1, 0xCD, 0x33, 0x6A, 0xAB, 0x1D, 0x4F, 0x95, 0x27, 0x5B, 0x9F, 0x23, 0x54, 0x98, 0x1B, 0x49, 0x8A, 0x22, 0x4F, 0x8C, 0x19, 0x41, 0x82, 0x2D, 0x5E, 0x9C, 0x25, 0x59, 0xA0, 0x19, 0x4D, 0x92, 0x25, 0x5E, 0xA3, 0x1C, 0x4D, 0x95, 0x27, 0x5D, 0xA5, 0x29, 0x69, 0xAD, 0x28, 0x64, 0xAC, 0x2C, 0x6A, 0xAB, 0x74, 0x97, 0xBB, 0x96, 0xAA, 0xC6, 0x82, 0x9F, 0xC2, 0x9F, 0xB1, 0xC9, 0x5F, 0x85, 0xB1, 0x95, 0xAA, 0xC7, 0x7F, 0x9A, 0xB9, 0x80, 0x9D, 0xC2, 0x81, 0x9A, 0xB7, 0x72, 0x92, 0xB5, 0x9B, 0xAF, 0xCC, 0x66, 0x8A, 0xB1, 0x8E, 0xA4, 0xBF, 0x7C, 0x97, 0xB5, 0x78, 0x94, 0xB5, 0x95, 0xAB, 0xC8, 0x32, 0x6A, 0xA5, 0x2E, 0x63, 0xA5, 0x2B, 0x63, 0xA4, 0x29, 0x60, 0xA0, 0x1F, 0x52, 0x97, 0x2C, 0x65, 0xA4, 0x27, 0x5C, 0x97, 0x31, 0x6B, 0xA9, 0x2B, 0x6A, 0xAF, 0x33, 0x69, 0xA9, 0x38, 0x6D, 0xAD, 0x3A, 0x6E, 0xB0, 0x3E, 0x74, 0xB2, 0x2B, 0x65, 0xA6, 0x3F, 0x75, 0xB1, 0x2C, 0x67, 0xAC, 0xAB, 0xBC, 0xCD, 0xA6, 0xB5, 0xC9, 0x9C, 0xB2, 0xCE, 0xBD, 0xC5, 0xD4, 0x67, 0x8D, 0xBB, 0xC0, 0xC3, 0xCF, 0x77, 0x97, 0xC1, 0xAC, 0xB8, 0xC9, 0x8D, 0xA6, 0xC3, 0x77, 0x96, 0xB8, 0xBB, 0xC6, 0xCE, 0x6B, 0x93, 0xBB, 0xB5, 0xBD, 0xCD, 0x70, 0x96, 0xBF, 0x9E, 0xAE, 0xC4, 0x9B, 0xAF, 0xCB, 0x84, 0x9F, 0xC3, 0x31, 0x6F, 0xAE, 0x70, 0x8D, 0xB2, 0x4A, 0x7C, 0xB3, 0x72, 0x8B, 0xB2, 0x67, 0x8F, 0xBD, 0x3B, 0x6E, 0xA5, 0x94, 0xAA, 0xCC, 0x35, 0x73, 0xBA, 0x8A, 0xA2, 0xC2, 0x6E, 0x95, 0xC3, 0x80, 0x9C, 0xC4, 0x7C, 0x9F, 0xCA, 0x4A, 0x74, 0xAB, 0x9A, 0xAB, 0xC9, 0x3C, 0x77, 0xB4, 0xA9, 0xBB, 0xCE, 0xE5, 0xE2, 0xDF, 0xD7, 0xD4, 0xD7, 0xE1, 0xE1, 0xE4, 0xC9, 0xCC, 0xCE, 0xD5, 0xD8, 0xDA, 0xD7, 0xD5, 0xD9, 0xCF, 0xCE, 0xD1, 0xD1, 0xD0, 0xD6, 0xC8, 0xC8, 0xCE, 0xD7, 0xD8, 0xD7, 0xC9, 0xC6, 0xCA, 0xD0, 0xCF, 0xD6, 0xD1, 0xCF, 0xD5, 0xD0, 0xCF, 0xD3, 0xE1, 0xE0, 0xE5, 0x66, 0x8E, 0xBE, 0x5A, 0x7F, 0xAF, 0x57, 0x81, 0xB4, 0x54, 0x79, 0xAA, 0x70, 0x8D, 0xB7, 0x60, 0x8B, 0xBA, 0x69, 0x8A, 0xB5, 0x5A, 0x89, 0xBF, 0x8C, 0xAB, 0xCE, 0x52, 0x87, 0xB6, 0x7A, 0x9F, 0xC7, 0x72, 0x99, 0xC1, 0x51, 0x81, 0xB7, 0x7D, 0x9A, 0xBE, 0x53, 0x81, 0xBA, 0x89, 0xA4, 0xC4, 0xCB, 0xD2, 0xD9, 0xDF, 0xDF, 0xD9, 0xDC, 0xDC, 0xD8, 0xDE, 0xDF, 0xDB, 0xD2, 0xD5, 0xD1, 0xDB, 0xDF, 0xDB, 0xD7, 0xD7, 0xD4, 0xDC, 0xDC, 0xD9, 0xD8, 0xD7, 0xD8, 0xD6, 0xD6, 0xD6, 0xE2, 0xE3, 0xDF, 0xD2, 0xD2, 0xD1, 0xDE, 0xDD, 0xDF, 0xDD, 0xDD, 0xDE, 0xD4, 0xD4, 0xD3, 0xE5, 0xE5, 0xE5, 0x48, 0x77, 0xB2, 0x7F, 0x9A, 0xC0, 0x47, 0x78, 0xB1, 0x5F, 0x82, 0xB4, 0x6C, 0x8D, 0xB8, 0x47, 0x78, 0xB1, 0x87, 0xA5, 0xC7, 0x66, 0x92, 0xC0, 0x67, 0x91, 0xBE, 0x57, 0x84, 0xB4, 0x7B, 0x9C, 0xC5, 0x87, 0xA6, 0xC7, 0x54, 0x7D, 0xB3, 0x74, 0x96, 0xBE, 0x53, 0x85, 0xB7, 0x69, 0x91, 0xBE, 0xBF, 0xC5, 0xCE, 0xE3, 0xE2, 0xE0, 0xD8, 0xD9, 0xD3, 0xDF, 0xDF, 0xDB, 0xD6, 0xD6, 0xD5, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD2, 0xD6, 0xD6, 0xD6, 0xDC, 0xDC, 0xDC, 0xD5, 0xD5, 0xD5, 0xDB, 0xDB, 0xDA, 0xD9, 0xD9, 0xD9, 0xDF, 0xDF, 0xDF, 0xD6, 0xD6, 0xD7, 0xCC, 0xCC, 0xCE, 0xE3, 0xE2, 0xE5, 0x82, 0xA0, 0xC4, 0x3C, 0x76, 0xB3, 0x90, 0xA8, 0xC4, 0x4A, 0x7D, 0xB6, 0x75, 0x97, 0xC0, 0x72, 0x99, 0xC8, 0x4B, 0x80, 0xB5, 0x92, 0xAD, 0xCE, 0x27, 0x68, 0xAB, 0x89, 0xA0, 0xC1, 0x60, 0x8A, 0xBD, 0x81, 0x9C, 0xC1, 0x78, 0x9B, 0xC0, 0x41, 0x75, 0xB0, 0x90, 0xAA, 0xCB, 0x39, 0x74, 0xB2, 0xAB, 0xBA, 0xCF, 0xE3, 0xE0, 0xDF, 0xDB, 0xDC, 0xD8, 0xE3, 0xE4, 0xE0, 0xD8, 0xD9, 0xD8, 0xDA, 0xDA, 0xDA, 0xD4, 0xD4, 0xD4, 0xD7, 0xD7, 0xD7, 0xDC, 0xDC, 0xDC, 0xD4, 0xD4, 0xD4, 0xD3, 0xD3, 0xD3, 0xD5, 0xD5, 0xD5, 0xDA, 0xDA, 0xDA, 0xDD, 0xDD, 0xDD, 0xD4, 0xD4, 0xD6, 0xE3, 0xE3, 0xE5, 0x51, 0x87, 0xC0, 0x8C, 0xA4, 0xC6, 0x56, 0x87, 0xBE, 0x79, 0x9B, 0xC2, 0x6C, 0x92, 0xC2, 0x6A, 0x95, 0xC1, 0x8A, 0xA6, 0xC5, 0x48, 0x7C, 0xB9, 0x91, 0xA7, 0xC1, 0x58, 0x81, 0xB5, 0x78, 0x96, 0xBF, 0x78, 0x96, 0xBB, 0x5E, 0x86, 0xB7, 0x87, 0xA2, 0xC3, 0x3E, 0x79, 0xB5, 0x8A, 0xA5, 0xC0, 0xD3, 0xD6, 0xDD, 0xD9, 0xD7, 0xD7, 0xDA, 0xDC, 0xD6, 0xDE, 0xDF, 0xDA, 0xDC, 0xDD, 0xD8, 0xD5, 0xD6, 0xD2, 0xD4, 0xD4, 0xD4, 0xDB, 0xDB, 0xDB, 0xDF, 0xDF, 0xDF, 0xDB, 0xDB, 0xDB, 0xDA, 0xDA, 0xDA, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD8, 0xDF, 0xDF, 0xE0, 0x6A, 0x91, 0xC0, 0x65, 0x8D, 0xBC, 0x54, 0x81, 0xB6, 0x63, 0x8B, 0xB8, 0x72, 0x96, 0xC0, 0x62, 0x89, 0xBA, 0x67, 0x91, 0xBE, 0x57, 0x83, 0xB8, 0x62, 0x8E, 0xBC, 0x4C, 0x74, 0xA7, 0x5A, 0x84, 0xB7, 0x6C, 0x90, 0xB9, 0x61, 0x8D, 0xC0, 0x6E, 0x95, 0xBE, 0x62, 0x89, 0xB9, 0x5E, 0x8D, 0xBD, 0xBD, 0xC9, 0xD7, 0xDD, 0xDA, 0xD9, 0xD3, 0xD3, 0xCE, 0xE3, 0xE4, 0xDF, 0xDD, 0xDE, 0xD9, 0xDC, 0xDD, 0xD8, 0xDE, 0xDE, 0xDD, 0xD9, 0xD9, 0xD9, 0xDF, 0xDF, 0xDF, 0xDA, 0xDA, 0xDA, 0xDC, 0xDC, 0xDC, 0xD5, 0xD5, 0xD5, 0xD9, 0xD9, 0xD9, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xDC, 0xDC, 0xDB, 0x90, 0xAB, 0xCE, 0x48, 0x7C, 0xB5, 0x9B, 0xB2, 0xCC, 0x64, 0x8E, 0xBF, 0x6F, 0x98, 0xC2, 0x70, 0x97, 0xC4, 0x4A, 0x7C, 0xB2, 0x70, 0x94, 0xBF, 0x3C, 0x77, 0xB5, 0x78, 0x98, 0xBE, 0x5D, 0x89, 0xBE, 0x6D, 0x8D, 0xBC, 0x73, 0x9B, 0xC5, 0x65, 0x8E, 0xBD, 0x88, 0xA5, 0xCC, 0x3F, 0x75, 0xB2, 0xB2, 0xBD, 0xCF, 0xDA, 0xD8, 0xD5, 0xD8, 0xD8, 0xD4, 0xE2, 0xE3, 0xDE, 0xD5, 0xD6, 0xD5, 0xE3, 0xE3, 0xE3, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xE2, 0xE2, 0xE2, 0xDA, 0xDA, 0xDA, 0xE2, 0xE2, 0xE2, 0xD2, 0xD2, 0xD2, 0xD9, 0xD9, 0xD8, 0xD5, 0xD5, 0xD6, 0xCE, 0xCD, 0xD0, 0xDC, 0xDB, 0xDF, 0x52, 0x88, 0xC3, 0x81, 0x9D, 0xC3, 0x3C, 0x76, 0xB4, 0x91, 0xAA, 0xC5, 0x74, 0x9D, 0xC8, 0x57, 0x8B, 0xBF, 0x8C, 0xA4, 0xC5, 0x48, 0x7C, 0xB6, 0x9C, 0xAE, 0xC6, 0x5D, 0x87, 0xB6, 0x78, 0x9A, 0xC2, 0x71, 0x95, 0xC0, 0x6A, 0x91, 0xC0, 0xA2, 0xB6, 0xCB, 0x3C, 0x79, 0xB8, 0x92, 0xA6, 0xC5, 0xD1, 0xD2, 0xD9, 0xDA, 0xD9, 0xD8, 0xDD, 0xDE, 0xDA, 0xDE, 0xDF, 0xDA, 0xD8, 0xD8, 0xD8, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xDF, 0xDF, 0xDF, 0xE1, 0xE1, 0xE1, 0xDF, 0xDF, 0xDF, 0xE0, 0xE0, 0xE0, 0xD8, 0xD8, 0xD8, 0xD7, 0xD7, 0xD7, 0xDA, 0xDA, 0xDA, 0xD5, 0xD4, 0xD7, 0xE3, 0xE2, 0xE6, 0x8B, 0xA8, 0xCD, 0x49, 0x7E, 0xB7, 0x89, 0xA5, 0xCB, 0x69, 0x92, 0xC2, 0x72, 0x9A, 0xC1, 0x70, 0x9B, 0xC6, 0x51, 0x84, 0xBC, 0x63, 0x88, 0xB9, 0x48, 0x7A, 0xB6, 0x68, 0x88, 0xAF, 0x5B, 0x88, 0xB9, 0x83, 0x9E, 0xC2, 0x6A, 0x90, 0xBD, 0x55, 0x83, 0xB5, 0x78, 0x9A, 0xC2, 0x57, 0x89, 0xBD, 0xB1, 0xBC, 0xCC, 0xE1, 0xDF, 0xDE, 0xD3, 0xD4, 0xCF, 0xE3, 0xE4, 0xDF, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xDC, 0xDC, 0xDC, 0xDB, 0xDB, 0xDB, 0xE0, 0xE0, 0xE0, 0xD8, 0xD8, 0xD8, 0xE1, 0xE1, 0xE1, 0xDB, 0xDB, 0xDB, 0xDA, 0xDA, 0xDA, 0xDE, 0xDE, 0xDE, 0xCC, 0xCB, 0xCE, 0xDB, 0xDB, 0xDE, 0x81, 0xA2, 0xCD, 0x4D, 0x7C, 0xB1, 0x8B, 0xA7, 0xCA, 0x54, 0x87, 0xBD, 0x7F, 0x9E, 0xC6, 0x7D, 0xA0, 0xC9, 0x4C, 0x7B, 0xB5, 0x5F, 0x8B, 0xB9, 0x4B, 0x77, 0xB1, 0x5B, 0x7F, 0xB1, 0x61, 0x8B, 0xBC, 0x67, 0x8C, 0xB8, 0x5E, 0x8B, 0xBD, 0x5D, 0x84, 0xB3, 0x72, 0x96, 0xC0, 0x5C, 0x87, 0xB4, 0xBB, 0xC5, 0xD4, 0xE1, 0xE0, 0xDF, 0xD6, 0xD8, 0xD3, 0xE5, 0xE6, 0xE1, 0xDD, 0xDD, 0xDD, 0xDF, 0xDF, 0xDF, 0xDA, 0xDA, 0xDA, 0xDB, 0xDB, 0xDB, 0xE1, 0xE1, 0xE1, 0xDC, 0xDC, 0xDC, 0xDE, 0xDE, 0xDE, 0xD4, 0xD4, 0xD4, 0xDC, 0xDC, 0xDC, 0xDF, 0xDF, 0xDF, 0xD3, 0xD2, 0xD6, 0xD3, 0xD2, 0xD6, 0x56, 0x88, 0xC4, 0x8E, 0xA5, 0xC7, 0x50, 0x81, 0xB9, 0x8E, 0xA6, 0xC6, 0x71, 0x94, 0xBF, 0x69, 0x91, 0xC1, 0x9B, 0xB1, 0xD1, 0x3E, 0x78, 0xB6, 0x8E, 0xA7, 0xCA, 0x56, 0x82, 0xB7, 0x68, 0x90, 0xBB, 0x64, 0x88, 0xB8, 0x65, 0x90, 0xC1, 0x8A, 0xA3, 0xC1, 0x4B, 0x7C, 0xB3, 0x8B, 0xA6, 0xC5, 0xC6, 0xCC, 0xD9, 0xDC, 0xDB, 0xDA, 0xDB, 0xDC, 0xD7, 0xE4, 0xE5, 0xE0, 0xD6, 0xD6, 0xD5, 0xDB, 0xDB, 0xDB, 0xE1, 0xE1, 0xE1, 0xDA, 0xDA, 0xDA, 0xE3, 0xE3, 0xE3, 0xD9, 0xD9, 0xD9, 0xE1, 0xE1, 0xE1, 0xDA, 0xDA, 0xDA, 0xD7, 0xD7, 0xD7, 0xDF, 0xDF, 0xDF, 0xD8, 0xD7, 0xDB, 0xD9, 0xD8, 0xDC, 0x9D, 0xB6, 0xD6, 0x50, 0x83, 0xBD, 0xAD, 0xBC, 0xD5, 0x6B, 0x93, 0xC7, 0x8D, 0xA4, 0xC0, 0x8D, 0xAA, 0xCA, 0x46, 0x7D, 0xB9, 0x8A, 0xA2, 0xC7, 0x2F, 0x70, 0xB3, 0x76, 0x95, 0xBF, 0x66, 0x8D, 0xBF, 0x84, 0x9F, 0xC0, 0x7A, 0x9D, 0xC5, 0x3B, 0x74, 0xAD, 0x93, 0xAB, 0xC6, 0x30, 0x72, 0xB7, 0xA5, 0xB7, 0xCE, 0xE8, 0xE6, 0xE3, 0xD9, 0xD9, 0xD5, 0xE1, 0xE2, 0xDE, 0xD9, 0xD9, 0xD9, 0xE3, 0xE3, 0xE3, 0xDF, 0xDF, 0xDF, 0xDA, 0xDA, 0xDA, 0xE1, 0xE1, 0xE1, 0xDD, 0xDD, 0xDD, 0xDB, 0xDB, 0xDB, 0xD0, 0xD0, 0xD0, 0xD4, 0xD4, 0xD3, 0xD8, 0xD8, 0xD9, 0xD7, 0xD6, 0xDB, 0xE0, 0xDF, 0xE4, 0x68, 0x92, 0xC3, 0x5C, 0x89, 0xB9, 0x6C, 0x96, 0xC7, 0x5F, 0x85, 0xBB, 0x73, 0x94, 0xBE, 0x61, 0x90, 0xC3, 0x66, 0x8B, 0xBE, 0x66, 0x90, 0xC4, 0x77, 0x9A, 0xBF, 0x60, 0x89, 0xB6, 0x6C, 0x8D, 0xB9, 0x74, 0x95, 0xBC, 0x60, 0x8D, 0xBD, 0x78, 0x96, 0xBF, 0x55, 0x88, 0xBE, 0x75, 0x96, 0xC0, 0xC1, 0xCB, 0xD6, 0xDC, 0xDC, 0xD8, 0xDF, 0xDF, 0xDE, 0xE7, 0xE7, 0xE6, 0xDA, 0xDA, 0xDA, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xDC, 0xDC, 0xDC, 0xDE, 0xDE, 0xDE, 0xDD, 0xDD, 0xDD, 0xD9, 0xD9, 0xD9, 0xD7, 0xD7, 0xD7, 0xDA, 0xDA, 0xDA, 0xD9, 0xD9, 0xD9, 0xD6, 0xD6, 0xD9, 0xDE, 0xDE, 0xE0, 0x46, 0x7E, 0xBA, 0x8A, 0xA6, 0xCC, 0x48, 0x7C, 0xB8, 0x7D, 0x9B, 0xC3, 0x77, 0x96, 0xBF, 0x5F, 0x8D, 0xBF, 0x8E, 0xAB, 0xCF, 0x48, 0x7D, 0xB9, 0x8F, 0xAB, 0xC9, 0x5C, 0x85, 0xB4, 0x62, 0x89, 0xB9, 0x7B, 0x96, 0xB7, 0x58, 0x86, 0xBB, 0x7E, 0x9B, 0xBF, 0x57, 0x85, 0xBA, 0x90, 0xAB, 0xCC, 0xC1, 0xCA, 0xD3, 0xDC, 0xDB, 0xD7, 0xDD, 0xDD, 0xDD, 0xDE, 0xDD, 0xDE, 0xD3, 0xD3, 0xD3, 0xD9, 0xD9, 0xD9, 0xDE, 0xDE, 0xDE, 0xDF, 0xDF, 0xDF, 0xDE, 0xDE, 0xDE, 0xD4, 0xD4, 0xD4, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD0, 0xD0, 0xD1, 0xDC, 0xDC, 0xDD, 0xCF, 0xCF, 0xD1, 0xE1, 0xE1, 0xE4, 0x9D, 0xB3, 0xD5, 0x38, 0x78, 0xBB, 0x95, 0xAA, 0xCD, 0x58, 0x88, 0xBF, 0x6E, 0x91, 0xBC, 0x91, 0xAB, 0xD1, 0x4E, 0x85, 0xC1, 0x9D, 0xAF, 0xCD, 0x36, 0x76, 0xBA, 0x7A, 0x95, 0xBB, 0x65, 0x8C, 0xBE, 0x76, 0x94, 0xBB, 0x75, 0x99, 0xC6, 0x3E, 0x74, 0xAF, 0xA7, 0xB7, 0xD1, 0x3E, 0x75, 0xB4, 0xAB, 0xBC, 0xCF, 0xE4, 0xE4, 0xE1, 0xD7, 0xD8, 0xD8, 0xE0, 0xE0, 0xE0, 0xD6, 0xD6, 0xD6, 0xDE, 0xDE, 0xDE, 0xDD, 0xDD, 0xDD, 0xE0, 0xE0, 0xE0, 0xE3, 0xE3, 0xE3, 0xD5, 0xD5, 0xD5, 0xDE, 0xDE, 0xDE, 0xD4, 0xD4, 0xD4, 0xD9, 0xD8, 0xDC, 0xD3, 0xD2, 0xD7, 0xD1, 0xD0, 0xD2, 0xDA, 0xDA, 0xDB, 0x4F, 0x80, 0xB8, 0x60, 0x8B, 0xBD, 0x5F, 0x8A, 0xBB, 0x6E, 0x92, 0xC1, 0x72, 0x91, 0xBF, 0x60, 0x8C, 0xC4, 0x85, 0xA2, 0xC9, 0x5E, 0x8B, 0xBE, 0x6E, 0x8F, 0xBB, 0x68, 0x8D, 0xB9, 0x6B, 0x91, 0xBF, 0x78, 0x95, 0xBA, 0x60, 0x8B, 0xBB, 0x99, 0xAB, 0xC8, 0x64, 0x8B, 0xC0, 0x7F, 0x9A, 0xBA, 0xCE, 0xD2, 0xD9, 0xDD, 0xDE, 0xDC, 0xDD, 0xDE, 0xDE, 0xDB, 0xDB, 0xDB, 0xD6, 0xD6, 0xD6, 0xDB, 0xDB, 0xDB, 0xDA, 0xDA, 0xDA, 0xE2, 0xE2, 0xE2, 0xDA, 0xDA, 0xDA, 0xD7, 0xD7, 0xD7, 0xDA, 0xDA, 0xDA, 0xD7, 0xD7, 0xD8, 0xDA, 0xD9, 0xDE, 0xD3, 0xD2, 0xD7, 0xC9, 0xC8, 0xCE, 0xD2, 0xD1, 0xD7};


ClothSim::ClothSim(int argc, char **argv)
{
	if(s)exit(0);
	s = this;
	
	
	
	yoff = kSide/2;
	glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGBA|GLUT_DEPTH);
    glutInitWindowSize (800, 800);
    glutInitWindowPosition (100, 100);
    glutCreateWindow("Cloth");
	glewInit();
	
	cudaGLSetGLDevice(0);

	init();
	
	float* positions;
	size_t num_bytes;
	cudaGraphicsMapResources(1, &positionsVBO_CUDA, 0); 
	cudaGraphicsResourceGetMappedPointer((void**)&positions, &num_bytes, positionsVBO_CUDA);
	cloth = new Cloth(positions);
	cudaGraphicsUnmapResources(1, &positionsVBO_CUDA, 0);
	
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
	glutIdleFunc(tick);
	glutSpecialFunc(skeyboard);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouse);
}


ClothSim::~ClothSim()
{
	delete cloth;
	glDeleteTextures(1,&clothtex);
	cudaGraphicsUnregisterResource(positionsVBO_CUDA); 
	glDeleteBuffers(1,&positionsVBO);
	s = 0;
}

int ClothSim::go()
{
	glutMainLoop();
	return 0;
}

void ClothSim::init()
{
	int i,row,column,x0,x1,x2;

	glEnable (GL_DEPTH_TEST);
	glDepthMask(GL_TRUE);
	glClearColor (0.0,0.0,0.0,1.0);

	viewer[0] = kSide/2;

	viewer[1] = kSide/2;

	viewer[2] = kSide*2;

	rho = kSide*2;
	phi = 3.14159265359/2.0f;
	theta = 0;
	running = true;

	for(i = 0 ; i < kNumberTriangles/2;++i)
	{
		getTrianglePoints(2*i, &x0, &x1, &x2, kSide);
		
		indexArray[4*i] = x0;
		indexArray[4*i+1] = x1;
		indexArray[4*i+2] = x1+kSide;
		indexArray[4*i+3] = x2;
	}

	for( i = 0; i < kNumberParticles; i++)
	{
		row = i/kSide;
		column = i%kSide;
		text_verts[2*i] = (column&1); 
		text_verts[2*i+1] = (row&1);
	}

	lightPos0[0] = kSide/2;
	lightPos0[1] = kSide/2;
	lightPos0[2] = kSide/2;
	lightPos0[3] = 1.0f;
	
	
	glGenBuffers(1, &positionsVBO); 
	glBindBuffer(GL_ARRAY_BUFFER,positionsVBO);  
	glBufferData(GL_ARRAY_BUFFER, 2*kNumberFloats*sizeof(float), 0, GL_DYNAMIC_DRAW); 
	glBindBuffer(GL_ARRAY_BUFFER, 0); 
	cudaGraphicsGLRegisterBuffer(&positionsVBO_CUDA, positionsVBO, cudaGraphicsMapFlagsNone);
	glEnable(GL_TEXTURE_2D); 
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_NORMAL_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glTexCoordPointer(2, GL_SHORT, 0, text_verts);
	clothtex = loadTexture();
	glBindBuffer(GL_ARRAY_BUFFER,positionsVBO);
	glVertexPointer(3,GL_FLOAT,0,0);
	glNormalPointer(GL_FLOAT,0,(const GLvoid*)(kNumberFloats*sizeof(float))); 
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glShadeModel(GL_SMOOTH);
	glEnable(GL_DEPTH_TEST);
	glClearColor(0.6, 0.6, 1.0, 1.0);
	GLfloat whiteMaterial[] = {1.0, 1.0, 1.0};
	GLfloat lightColor0[] = {1.0f, 1.0f, 1.0f, 1.0f}; 
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT,lightColor0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightColor0);
    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE,  whiteMaterial);

}


void ClothSim::render()
{
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(viewer[0],viewer[1],viewer[2],kSide/2,kSide/2+(yoff-kSide/2),0,0,1,0);
	glDrawElements(GL_QUADS, kNumberTriangles*2, GL_UNSIGNED_SHORT, indexArray);
    glutSwapBuffers();
}

void ClothSim::update()
{
	static float* positions = NULL;
	size_t num_bytes; 
	
	cudaGraphicsMapResources(1, &positionsVBO_CUDA, 0); 
	cudaGraphicsResourceGetMappedPointer((void**)&positions, &num_bytes, positionsVBO_CUDA); // Execute kernel 
	if(running)cloth->stepForeward(positions);
	cudaGraphicsUnmapResources(1, &positionsVBO_CUDA, 0);
	glutPostRedisplay();
}

void ClothSim::skeypress(int key)
{
	
	switch(key)
	{
		case GLUT_KEY_LEFT:
			theta-=0.05;
			break;
			
		case GLUT_KEY_RIGHT:
			theta+=0.05;
			break;
			
		case GLUT_KEY_UP:
			phi-=0.05;
			break;
			
		case GLUT_KEY_DOWN:
			phi+=0.05;
			break;
		
		default:
			break;
	}
	
	
	viewer[2] = cos(theta)*sin(phi)*rho;
	viewer[0] = kSide/2 + sin(theta)*sin(phi)*rho;
	viewer[1] = yoff + cos(phi)*rho;
	
	
}

void ClothSim::keypress(unsigned char key)
{
    if(key == 32)
	{
	running = !running;
	}
	else if(key == 'a')
	{
		rho-=0.8;
	}
	else if(key == 'z')
	{
		rho+=0.8;
	}
	else if(key == 'd')
	{
		yoff -= 0.5;
		
	}
	else if(key == 'u')
	{
		yoff += 0.5;
	}
	else if(key == 'y')
	{
		lightPos0[1]+=0.2;
	}
	else if(key == 'b')
	{
		lightPos0[1]-=0.2;
	}
	else if(key == 'g')
	{
		lightPos0[0]-=0.2;
	}
	else if(key == 'h')
	{
		lightPos0[0]+=0.2;
	}
	else if(key == 'w')
	{
		cloth->toggleWind();
	}
	
	viewer[2] = cos(theta)*sin(phi)*rho;
	viewer[0] = kSide/2 + sin(theta)*sin(phi)*rho;
	viewer[1] = yoff + cos(phi)*rho;
	
}


void ClothSim::mouseaction(int button)
{
    button = 0;
}

static void tick()
{
	s->update();
}


static void display()
{
	s->render();
}


static void skeyboard(int key,int x, int y)
{
    x=y;
	s->skeypress(key);
}


static void keyboard(unsigned char key, int x,int y)
{
    x=y;
	s->keypress(key);
}

static void mouse(int button, int state, int x, int y)
{
    state=y=x;
	s->mouseaction(button);
}

static void reshape (int w, int h) {
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective (60, (GLfloat)w / (GLfloat)h, 1.0, 200.0);
    glMatrixMode(GL_MODELVIEW);
}


GLuint ClothSim::loadTexture() // returns name of texture created with name.jpg
{
	
	GLuint tex;
	//FILE * fp = 0;
	//void* imageData = 0;
    glGenTextures( 1, &tex);
	glBindTexture(GL_TEXTURE_2D, tex);
	glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE ); 
	glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_NEAREST);
    glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
	
	//imageData = malloc(width * height * 3);
	
	/*fp = fopen(name,"rb");
	if(!fp)
    {
        char error[256];
        perror(error);
        printf("%s",error);
        exit(0);
        
    }
	fread(imageData, width * height * 3, 1, fp);
	fclose(fp);*/
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 32, 32, 0, GL_RGB, GL_UNSIGNED_BYTE, imageData);
	glGenerateMipmap(GL_TEXTURE_2D);
    //free(imageData);
    return tex;
}


void ClothSim::getTrianglePoints(int tri,int* x0,int* x1,int* x2,int size)
{
	if((tri&1)==0) //type A : even index
	{
		(*x0) = tri/2+tri/(2*(size-1));
		(*x1) = (*x0)+1;
		(*x2) = (*x0)+size;
	}
	else		  // type B : odd index
	{
		(*x2) = (tri-1)/2+(tri-1)/(2*(size-1))+1;
		(*x0) = (*x2)+size;
		(*x1) = (*x2)+size-1;
	}
}
